package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"

	"example.com/federation-demo/users/graph/model"
	faker "github.com/go-faker/faker/v4"
)

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context, ids []string) ([]*model.User, error) {
	var users []*model.User
	for _, user := range users {
		for _, id := range ids {
			if user.ID == id {
				users = append(users, user)
			}
		}
	}
	return users, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	for _, user := range users {
		if user.ID == id {
			return user, nil
		}
	}
	return nil, fmt.Errorf("user not found")
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
var users = initUserData(10)

func initUserData(count int) []*model.User {
	users := []*model.User{}
	for i := 0; i < count; i++ {
		users = append(users, &model.User{
			ID:    fmt.Sprintf("user-%d", i+1),
			Name:  faker.Name(),
			Email: faker.Email(),
		})
	}
	return users
}
