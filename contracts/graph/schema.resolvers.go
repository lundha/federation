package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"

	"example.com/federation-demo/contracts/graph/model"
	faker "github.com/go-faker/faker/v4"
)

// GetContracts is the resolver for the getContracts field.
func (r *queryResolver) GetContracts(ctx context.Context, limit *int) ([]*model.Contract, error) {
	if limit != nil {
		return contracts[:*limit], nil
	}
	return contracts, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
var contracts = initContractData(3)

func initContractData(count int) []*model.Contract {
	contracts := make([]*model.Contract, count)
	for i := 1; i < count+1; i++ {
		supplierId := fmt.Sprintf("supplier-%d", i)
		contracts[i-1] = &model.Contract{
			ID:    fmt.Sprintf("contract-%d", i),
			Title: fmt.Sprintf("%s %s %s", faker.YearString(), faker.ChineseFirstName(), faker.Word()),
			Supplier: &model.Supplier{
				ID: supplierId,
			},
			Responsibles: []*model.User{
				{
					ID: fmt.Sprintf("user-%d", i),
				},
			},
		}
	}

	return contracts
}
