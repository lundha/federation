package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"
	"time"

	"example.com/federation-demo/suppliers/graph/model"
	"github.com/vektah/gqlparser/gqlerror"
)

// FindSupplierByID is the resolver for the findSupplierByID field.
func (r *entityResolver) FindSupplierByID(ctx context.Context, id string) (*model.Supplier, error) {
	// random  1 - 10ms
	time.Sleep(time.Millisecond * time.Duration(1+(time.Now().UnixNano()%10)))
	fmt.Printf("    supplier-resolver: %s\n", id)
	for _, supplier := range suppliers {
		if id == "supplier-1" {
			return nil, &errNotFound
		}
		if supplier.ID == id {
			return supplier, nil
		}
	}
	return nil, fmt.Errorf("supplier not found")
}

// Entity returns EntityResolver implementation.
func (r *Resolver) Entity() EntityResolver { return &entityResolver{r} }

type entityResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
var errNotFound = gqlerror.Error{
	Message: "not found error msg",
	Extensions: map[string]interface{}{
		"code": "NOT_FOUND",
	},
}
